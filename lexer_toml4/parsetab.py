
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASCII_CHAR ASCII_DIGIT ASSIGNMENT BASIC_STR_QUOTE COMMENT_START DASH DOT LITERAL_STR_QUOTE MINUS NEWLINE PLUS REVERSE_SOLIDUS UNDERSCORE UNICODE_CHAR UNICODE_CONTROL UNICODE_NUMBER UNICODE_PRIVATE_USE UNICODE_PUNCTUATION UNICODE_SEPARATOR UNICODE_SYMBOL WHITESPACE\n    toml : expression_list\n\n    expression_list : NEWLINE expression_list\n                | expression NEWLINE expression_list\n                | expression\n\n    expression : comment\n                | key_val\n                | key_val comment\n\n    comment : COMMENT_START comment_string\n\n    comment_string : comment_char\n                        | comment_char comment_string\n\n    comment_char :  ASCII_CHAR\n                    | ASCII_DIGIT\n                    | UNICODE_CHAR\n                    | UNICODE_NUMBER\n                    | UNICODE_PUNCTUATION\n                    | COMMENT_START\n                    | DASH\n                    | UNDERSCORE\n                    | WHITESPACE\n                    | PLUS\n\n    key_val : key ASSIGNMENT value\n\n    key : simple_key\n        | dotted_key\n\n    simple_key : bare_key\n                | quoted_key\n\n    bare_key : bare_key_sequence\n\n    bare_key_sequence : bare_key_char\n                        | bare_key_char bare_key_sequence\n\n    bare_key_char : ASCII_CHAR\n                    | ASCII_DIGIT\n                    | UNICODE_NUMBER\n                    | DASH\n                    | UNDERSCORE\n\n    quoted_key : basic_string\n                | literal_string\n\n    dotted_key : simple_key DOT simple_key\n\n    value : basic_string\n            | literal_string\n            | integer\n            | float\n            | boolean\n\n    basic_string : BASIC_STR_QUOTE BASIC_STR_QUOTE\n                    |   BASIC_STR_QUOTE basic_string_sequence BASIC_STR_QUOTE\n\n    basic_string_sequence : basic_string_char\n                            | basic_string_char basic_string_sequence\n\n    basic_string_char : ASCII_CHAR\n                        | ASCII_DIGIT\n                        | UNICODE_CHAR\n                        | UNICODE_NUMBER\n                        | UNICODE_PUNCTUATION\n                        | UNICODE_CONTROL\n                        | UNICODE_SYMBOL\n                        | UNICODE_SEPARATOR\n                        | UNICODE_PRIVATE_USE\n                        | LITERAL_STR_QUOTE\n                        | DASH\n                        | UNDERSCORE\n                        | WHITESPACE\n                        | DOT\n                        | COMMENT_START\n                        | PLUS\n                        | escape\n\n\n    literal_string : LITERAL_STR_QUOTE LITERAL_STR_QUOTE\n                    | LITERAL_STR_QUOTE literal_string_sequence LITERAL_STR_QUOTE\n\n    literal_string_sequence : literal_string_char\n                            | literal_string_char literal_string_sequence\n\n    literal_string_char : ASCII_CHAR\n                        | ASCII_DIGIT\n                        | UNICODE_CHAR\n                        | UNICODE_NUMBER\n                        | UNICODE_PUNCTUATION\n                        | UNICODE_CONTROL\n                        | UNICODE_SYMBOL\n                        | UNICODE_SEPARATOR\n                        | UNICODE_PRIVATE_USE\n                        | BASIC_STR_QUOTE\n                        | DASH\n                        | UNDERSCORE\n                        | WHITESPACE\n                        | DOT\n                        | COMMENT_START\n                        | REVERSE_SOLIDUS\n                        | PLUS\n                        | MINUS\n\n    escape : REVERSE_SOLIDUS escape_char\n\n    escape_char : LITERAL_STR_QUOTE\n                | BASIC_STR_QUOTE\n                | REVERSE_SOLIDUS\n                | ASCII_CHAR\n\n    integer : dec_int\n\n    dec_int : dec_int_sequence\n            | PLUS dec_int_sequence\n            | DASH dec_int_sequence\n\n    dec_int_sequence : dec_int_char\n                    | dec_int_char dec_int_sequence\n\n    dec_int_char : ASCII_DIGIT\n\n    float : dec_float\n\n    dec_float : integer DOT integer\n                | integer DOT integer exponent\n                | integer exponent\n\n    exponent : ASCII_CHAR integer\n\n    boolean : true\n            | false\n\n    true : ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR\n    false : ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR\n                        '
    
_lr_action_items = {'NEWLINE':([0,3,4,5,6,25,26,27,28,29,30,31,32,33,34,35,36,37,38,42,63,85,86,87,88,89,90,91,92,93,94,95,96,100,101,103,110,113,115,116,118,119,120,122,123,124,],[3,3,25,-5,-6,3,-7,-16,-8,-9,-11,-12,-13,-14,-15,-17,-18,-19,-20,-42,-63,-10,-21,-37,-38,-39,-40,-41,-90,-97,-102,-103,-91,-94,-96,-43,-64,-100,-92,-93,-95,-98,-101,-99,-104,-105,]),'COMMENT_START':([0,3,6,7,17,18,25,27,29,30,31,32,33,34,35,36,37,38,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,89,90,91,92,93,94,95,96,100,101,103,105,106,107,108,109,110,113,115,116,118,119,120,122,123,124,],[7,7,7,27,59,80,7,-16,27,-11,-12,-13,-14,-15,-17,-18,-19,-20,-42,59,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,80,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-21,-37,-38,-39,-40,-41,-90,-97,-102,-103,-91,-94,-96,-43,-88,-85,-86,-87,-89,-64,-100,-92,-93,-95,-98,-101,-99,-104,-105,]),'BASIC_STR_QUOTE':([0,3,17,18,25,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,104,105,106,107,108,109,],[17,17,42,75,17,17,17,103,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,108,75,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-45,-88,-85,-86,-87,-89,]),'LITERAL_STR_QUOTE':([0,3,17,18,25,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,111,],[18,18,54,63,18,18,18,54,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,107,110,-65,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,-66,]),'ASCII_CHAR':([0,3,7,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,92,96,99,100,101,105,106,107,108,109,115,116,117,118,119,121,123,],[19,19,30,19,45,66,-29,-30,-31,-32,-33,19,-16,30,-11,-12,-13,-14,-15,-17,-18,-19,-20,99,19,45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,109,66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,114,-90,-91,117,-94,-96,-88,-85,-86,-87,-89,-92,-93,121,-95,114,123,124,]),'ASCII_DIGIT':([0,3,7,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,97,98,100,101,105,106,107,108,109,112,114,],[20,20,31,20,46,67,-29,-30,-31,-32,-33,20,-16,31,-11,-12,-13,-14,-15,-17,-18,-19,-20,101,20,46,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,67,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,101,101,101,-96,-88,-85,-86,-87,-89,101,101,]),'UNICODE_NUMBER':([0,3,7,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[21,21,33,21,48,69,-29,-30,-31,-32,-33,21,-16,33,-11,-12,-13,-14,-15,-17,-18,-19,-20,21,48,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,69,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'DASH':([0,3,7,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,112,114,],[22,22,35,22,55,76,-29,-30,-31,-32,-33,22,-16,35,-11,-12,-13,-14,-15,-17,-18,-19,-20,98,22,55,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,76,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,98,98,]),'UNDERSCORE':([0,3,7,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[23,23,36,23,56,77,-29,-30,-31,-32,-33,23,-16,36,-11,-12,-13,-14,-15,-17,-18,-19,-20,23,56,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,77,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'$end':([1,2,4,5,6,24,26,27,28,29,30,31,32,33,34,35,36,37,38,42,63,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,103,110,113,115,116,118,119,120,122,123,124,],[0,-1,-4,-5,-6,-2,-7,-16,-8,-9,-11,-12,-13,-14,-15,-17,-18,-19,-20,-42,-63,-3,-10,-21,-37,-38,-39,-40,-41,-90,-97,-102,-103,-91,-94,-96,-43,-64,-100,-92,-93,-95,-98,-101,-99,-104,-105,]),'UNICODE_CHAR':([7,17,18,27,29,30,31,32,33,34,35,36,37,38,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[32,47,68,-16,32,-11,-12,-13,-14,-15,-17,-18,-19,-20,47,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,68,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'UNICODE_PUNCTUATION':([7,17,18,27,29,30,31,32,33,34,35,36,37,38,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[34,49,70,-16,34,-11,-12,-13,-14,-15,-17,-18,-19,-20,49,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,70,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'WHITESPACE':([7,17,18,27,29,30,31,32,33,34,35,36,37,38,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[37,57,78,-16,37,-11,-12,-13,-14,-15,-17,-18,-19,-20,57,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,78,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'PLUS':([7,17,18,27,29,30,31,32,33,34,35,36,37,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,112,114,],[38,60,82,-16,38,-11,-12,-13,-14,-15,-17,-18,-19,-20,97,60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,82,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,97,97,]),'ASSIGNMENT':([8,9,10,11,12,13,14,15,16,19,20,21,22,23,41,42,63,102,103,110,],[39,-22,-23,-24,-25,-26,-34,-35,-27,-29,-30,-31,-32,-33,-28,-42,-63,-36,-43,-64,]),'DOT':([9,11,12,13,14,15,16,17,18,19,20,21,22,23,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,92,96,100,101,103,105,106,107,108,109,110,115,116,118,],[40,-24,-25,-26,-34,-35,-27,58,79,-29,-30,-31,-32,-33,-28,-42,58,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,79,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,112,-90,-91,-94,-96,-43,-88,-85,-86,-87,-89,-64,-92,-93,-95,]),'UNICODE_CONTROL':([17,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[50,71,50,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,71,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'UNICODE_SYMBOL':([17,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[51,72,51,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,72,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'UNICODE_SEPARATOR':([17,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[52,73,52,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,73,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'UNICODE_PRIVATE_USE':([17,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[53,74,53,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,74,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'REVERSE_SOLIDUS':([17,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,105,106,107,108,109,],[62,81,62,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,105,81,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-88,-85,-86,-87,-89,]),'MINUS':([18,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,],[83,83,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'toml':([0,],[1,]),'expression_list':([0,3,25,],[2,24,84,]),'expression':([0,3,25,],[4,4,4,]),'comment':([0,3,6,25,],[5,5,26,5,]),'key_val':([0,3,25,],[6,6,6,]),'key':([0,3,25,],[8,8,8,]),'simple_key':([0,3,25,40,],[9,9,9,102,]),'dotted_key':([0,3,25,],[10,10,10,]),'bare_key':([0,3,25,40,],[11,11,11,11,]),'quoted_key':([0,3,25,40,],[12,12,12,12,]),'bare_key_sequence':([0,3,16,25,40,],[13,13,41,13,13,]),'basic_string':([0,3,25,39,40,],[14,14,14,87,14,]),'literal_string':([0,3,25,39,40,],[15,15,15,88,15,]),'bare_key_char':([0,3,16,25,40,],[16,16,16,16,16,]),'comment_string':([7,29,],[28,85,]),'comment_char':([7,29,],[29,29,]),'basic_string_sequence':([17,44,],[43,104,]),'basic_string_char':([17,44,],[44,44,]),'escape':([17,44,],[61,61,]),'literal_string_sequence':([18,65,],[64,111,]),'literal_string_char':([18,65,],[65,65,]),'value':([39,],[86,]),'integer':([39,112,114,],[89,119,120,]),'float':([39,],[90,]),'boolean':([39,],[91,]),'dec_int':([39,112,114,],[92,92,92,]),'dec_float':([39,],[93,]),'true':([39,],[94,]),'false':([39,],[95,]),'dec_int_sequence':([39,97,98,100,112,114,],[96,115,116,118,96,96,]),'dec_int_char':([39,97,98,100,112,114,],[100,100,100,100,100,100,]),'escape_char':([62,],[106,]),'exponent':([89,119,],[113,122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toml","S'",1,None,None,None),
  ('toml -> expression_list','toml',1,'p_grammar','parser_toml.py',122),
  ('expression_list -> NEWLINE expression_list','expression_list',2,'p_grammar','parser_toml.py',124),
  ('expression_list -> expression NEWLINE expression_list','expression_list',3,'p_grammar','parser_toml.py',125),
  ('expression_list -> expression','expression_list',1,'p_grammar','parser_toml.py',126),
  ('expression -> comment','expression',1,'p_grammar','parser_toml.py',128),
  ('expression -> key_val','expression',1,'p_grammar','parser_toml.py',129),
  ('expression -> key_val comment','expression',2,'p_grammar','parser_toml.py',130),
  ('comment -> COMMENT_START comment_string','comment',2,'p_grammar','parser_toml.py',132),
  ('comment_string -> comment_char','comment_string',1,'p_grammar','parser_toml.py',134),
  ('comment_string -> comment_char comment_string','comment_string',2,'p_grammar','parser_toml.py',135),
  ('comment_char -> ASCII_CHAR','comment_char',1,'p_grammar','parser_toml.py',137),
  ('comment_char -> ASCII_DIGIT','comment_char',1,'p_grammar','parser_toml.py',138),
  ('comment_char -> UNICODE_CHAR','comment_char',1,'p_grammar','parser_toml.py',139),
  ('comment_char -> UNICODE_NUMBER','comment_char',1,'p_grammar','parser_toml.py',140),
  ('comment_char -> UNICODE_PUNCTUATION','comment_char',1,'p_grammar','parser_toml.py',141),
  ('comment_char -> COMMENT_START','comment_char',1,'p_grammar','parser_toml.py',142),
  ('comment_char -> DASH','comment_char',1,'p_grammar','parser_toml.py',143),
  ('comment_char -> UNDERSCORE','comment_char',1,'p_grammar','parser_toml.py',144),
  ('comment_char -> WHITESPACE','comment_char',1,'p_grammar','parser_toml.py',145),
  ('comment_char -> PLUS','comment_char',1,'p_grammar','parser_toml.py',146),
  ('key_val -> key ASSIGNMENT value','key_val',3,'p_grammar','parser_toml.py',148),
  ('key -> simple_key','key',1,'p_grammar','parser_toml.py',150),
  ('key -> dotted_key','key',1,'p_grammar','parser_toml.py',151),
  ('simple_key -> bare_key','simple_key',1,'p_grammar','parser_toml.py',153),
  ('simple_key -> quoted_key','simple_key',1,'p_grammar','parser_toml.py',154),
  ('bare_key -> bare_key_sequence','bare_key',1,'p_grammar','parser_toml.py',156),
  ('bare_key_sequence -> bare_key_char','bare_key_sequence',1,'p_grammar','parser_toml.py',158),
  ('bare_key_sequence -> bare_key_char bare_key_sequence','bare_key_sequence',2,'p_grammar','parser_toml.py',159),
  ('bare_key_char -> ASCII_CHAR','bare_key_char',1,'p_grammar','parser_toml.py',161),
  ('bare_key_char -> ASCII_DIGIT','bare_key_char',1,'p_grammar','parser_toml.py',162),
  ('bare_key_char -> UNICODE_NUMBER','bare_key_char',1,'p_grammar','parser_toml.py',163),
  ('bare_key_char -> DASH','bare_key_char',1,'p_grammar','parser_toml.py',164),
  ('bare_key_char -> UNDERSCORE','bare_key_char',1,'p_grammar','parser_toml.py',165),
  ('quoted_key -> basic_string','quoted_key',1,'p_grammar','parser_toml.py',167),
  ('quoted_key -> literal_string','quoted_key',1,'p_grammar','parser_toml.py',168),
  ('dotted_key -> simple_key DOT simple_key','dotted_key',3,'p_grammar','parser_toml.py',170),
  ('value -> basic_string','value',1,'p_grammar','parser_toml.py',172),
  ('value -> literal_string','value',1,'p_grammar','parser_toml.py',173),
  ('value -> integer','value',1,'p_grammar','parser_toml.py',174),
  ('value -> float','value',1,'p_grammar','parser_toml.py',175),
  ('value -> boolean','value',1,'p_grammar','parser_toml.py',176),
  ('basic_string -> BASIC_STR_QUOTE BASIC_STR_QUOTE','basic_string',2,'p_grammar','parser_toml.py',178),
  ('basic_string -> BASIC_STR_QUOTE basic_string_sequence BASIC_STR_QUOTE','basic_string',3,'p_grammar','parser_toml.py',179),
  ('basic_string_sequence -> basic_string_char','basic_string_sequence',1,'p_grammar','parser_toml.py',181),
  ('basic_string_sequence -> basic_string_char basic_string_sequence','basic_string_sequence',2,'p_grammar','parser_toml.py',182),
  ('basic_string_char -> ASCII_CHAR','basic_string_char',1,'p_grammar','parser_toml.py',184),
  ('basic_string_char -> ASCII_DIGIT','basic_string_char',1,'p_grammar','parser_toml.py',185),
  ('basic_string_char -> UNICODE_CHAR','basic_string_char',1,'p_grammar','parser_toml.py',186),
  ('basic_string_char -> UNICODE_NUMBER','basic_string_char',1,'p_grammar','parser_toml.py',187),
  ('basic_string_char -> UNICODE_PUNCTUATION','basic_string_char',1,'p_grammar','parser_toml.py',188),
  ('basic_string_char -> UNICODE_CONTROL','basic_string_char',1,'p_grammar','parser_toml.py',189),
  ('basic_string_char -> UNICODE_SYMBOL','basic_string_char',1,'p_grammar','parser_toml.py',190),
  ('basic_string_char -> UNICODE_SEPARATOR','basic_string_char',1,'p_grammar','parser_toml.py',191),
  ('basic_string_char -> UNICODE_PRIVATE_USE','basic_string_char',1,'p_grammar','parser_toml.py',192),
  ('basic_string_char -> LITERAL_STR_QUOTE','basic_string_char',1,'p_grammar','parser_toml.py',193),
  ('basic_string_char -> DASH','basic_string_char',1,'p_grammar','parser_toml.py',194),
  ('basic_string_char -> UNDERSCORE','basic_string_char',1,'p_grammar','parser_toml.py',195),
  ('basic_string_char -> WHITESPACE','basic_string_char',1,'p_grammar','parser_toml.py',196),
  ('basic_string_char -> DOT','basic_string_char',1,'p_grammar','parser_toml.py',197),
  ('basic_string_char -> COMMENT_START','basic_string_char',1,'p_grammar','parser_toml.py',198),
  ('basic_string_char -> PLUS','basic_string_char',1,'p_grammar','parser_toml.py',199),
  ('basic_string_char -> escape','basic_string_char',1,'p_grammar','parser_toml.py',200),
  ('literal_string -> LITERAL_STR_QUOTE LITERAL_STR_QUOTE','literal_string',2,'p_grammar','parser_toml.py',203),
  ('literal_string -> LITERAL_STR_QUOTE literal_string_sequence LITERAL_STR_QUOTE','literal_string',3,'p_grammar','parser_toml.py',204),
  ('literal_string_sequence -> literal_string_char','literal_string_sequence',1,'p_grammar','parser_toml.py',206),
  ('literal_string_sequence -> literal_string_char literal_string_sequence','literal_string_sequence',2,'p_grammar','parser_toml.py',207),
  ('literal_string_char -> ASCII_CHAR','literal_string_char',1,'p_grammar','parser_toml.py',209),
  ('literal_string_char -> ASCII_DIGIT','literal_string_char',1,'p_grammar','parser_toml.py',210),
  ('literal_string_char -> UNICODE_CHAR','literal_string_char',1,'p_grammar','parser_toml.py',211),
  ('literal_string_char -> UNICODE_NUMBER','literal_string_char',1,'p_grammar','parser_toml.py',212),
  ('literal_string_char -> UNICODE_PUNCTUATION','literal_string_char',1,'p_grammar','parser_toml.py',213),
  ('literal_string_char -> UNICODE_CONTROL','literal_string_char',1,'p_grammar','parser_toml.py',214),
  ('literal_string_char -> UNICODE_SYMBOL','literal_string_char',1,'p_grammar','parser_toml.py',215),
  ('literal_string_char -> UNICODE_SEPARATOR','literal_string_char',1,'p_grammar','parser_toml.py',216),
  ('literal_string_char -> UNICODE_PRIVATE_USE','literal_string_char',1,'p_grammar','parser_toml.py',217),
  ('literal_string_char -> BASIC_STR_QUOTE','literal_string_char',1,'p_grammar','parser_toml.py',218),
  ('literal_string_char -> DASH','literal_string_char',1,'p_grammar','parser_toml.py',219),
  ('literal_string_char -> UNDERSCORE','literal_string_char',1,'p_grammar','parser_toml.py',220),
  ('literal_string_char -> WHITESPACE','literal_string_char',1,'p_grammar','parser_toml.py',221),
  ('literal_string_char -> DOT','literal_string_char',1,'p_grammar','parser_toml.py',222),
  ('literal_string_char -> COMMENT_START','literal_string_char',1,'p_grammar','parser_toml.py',223),
  ('literal_string_char -> REVERSE_SOLIDUS','literal_string_char',1,'p_grammar','parser_toml.py',224),
  ('literal_string_char -> PLUS','literal_string_char',1,'p_grammar','parser_toml.py',225),
  ('literal_string_char -> MINUS','literal_string_char',1,'p_grammar','parser_toml.py',226),
  ('escape -> REVERSE_SOLIDUS escape_char','escape',2,'p_grammar','parser_toml.py',228),
  ('escape_char -> LITERAL_STR_QUOTE','escape_char',1,'p_grammar','parser_toml.py',230),
  ('escape_char -> BASIC_STR_QUOTE','escape_char',1,'p_grammar','parser_toml.py',231),
  ('escape_char -> REVERSE_SOLIDUS','escape_char',1,'p_grammar','parser_toml.py',232),
  ('escape_char -> ASCII_CHAR','escape_char',1,'p_grammar','parser_toml.py',233),
  ('integer -> dec_int','integer',1,'p_grammar','parser_toml.py',235),
  ('dec_int -> dec_int_sequence','dec_int',1,'p_grammar','parser_toml.py',237),
  ('dec_int -> PLUS dec_int_sequence','dec_int',2,'p_grammar','parser_toml.py',238),
  ('dec_int -> DASH dec_int_sequence','dec_int',2,'p_grammar','parser_toml.py',239),
  ('dec_int_sequence -> dec_int_char','dec_int_sequence',1,'p_grammar','parser_toml.py',241),
  ('dec_int_sequence -> dec_int_char dec_int_sequence','dec_int_sequence',2,'p_grammar','parser_toml.py',242),
  ('dec_int_char -> ASCII_DIGIT','dec_int_char',1,'p_grammar','parser_toml.py',244),
  ('float -> dec_float','float',1,'p_grammar','parser_toml.py',246),
  ('dec_float -> integer DOT integer','dec_float',3,'p_grammar','parser_toml.py',248),
  ('dec_float -> integer DOT integer exponent','dec_float',4,'p_grammar','parser_toml.py',249),
  ('dec_float -> integer exponent','dec_float',2,'p_grammar','parser_toml.py',250),
  ('exponent -> ASCII_CHAR integer','exponent',2,'p_grammar','parser_toml.py',252),
  ('boolean -> true','boolean',1,'p_grammar','parser_toml.py',254),
  ('boolean -> false','boolean',1,'p_grammar','parser_toml.py',255),
  ('true -> ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR','true',4,'p_grammar','parser_toml.py',257),
  ('false -> ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR ASCII_CHAR','false',5,'p_grammar','parser_toml.py',258),
]
